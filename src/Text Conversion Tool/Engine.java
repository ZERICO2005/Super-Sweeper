import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import javax.imageio.ImageIO;

public class Engine {
	static int resX = 112;
	static int resY = 72;
	static int[] value = new int[resX * resY];
	static boolean type = true;
	
	//Old Text
	//static char[] table = {' ',';','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','.',',',':','-','?','!','%','/','(',')','>','<','m','f','x','k','g','l','r'};
	//static char[] table = {' ','0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','`','~','!','@','#','$','%','^','&','*','(',')','-','_','=','+','[','{',']','}','\\','|',';',':','\'','"',',','<','.','>','?','/'};
	
	//ISO Text 0
	//static char[] table = {'0','1','2','3','4','5','6','7','8','9','|','|','|','|','|','|','|','m','f','?','>','<',':','-','%','x','k','s','l','r','!','|',' ','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','.',',','/','(',')'};
	//ISO Text 2
	/*
	static char[] table = {'0','1','2','3','4','5','6','7','8','9','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','?','<','>','|','|',
						   ' ','|','.',',','/','(',')',':','-','%','|','|','|','|','#','=',
						   'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
						   'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',
						   'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v',
						   'w','x','y','z','Ñ','ñ','Ç','ç','Æ','æ','ß','ÿ','ø','!','¿','¡',
						   '|','|','|','|','|','|','|','|','\'','`','^','|','~','"','*','_',
						   
						   'Ø','¹','²','³','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','«','»','|','|',
						   '|','|','|','|','÷','[',']','¦','|','|','×','|','|','|','|','|',
						   '|','|','|','Ð','€','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','ƒ',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','µ','|',
						   '|','|','ý','|','|','|','|','¢','|','|','|','¥','|','¬','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','¨','°','|'};
	
	static char[] extra = {'Ø','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','M','F','¿','|','|','K','I',
						   'W','D','|','|','|','|','|','|','|','‰','x','G','L','E','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','N','n','C','c','A','a','B','y','o','¡','?','!',
						   '|','|','|','|','|','|','|','|','`','\'','^','|','|','|','|','-',
						   
						   '0','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','÷','×','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|',
						   '|','|','|','|','|','|','|','|','|','|','b','Y','ø','|','|','|',
						   
						   'O'};
	*/
	static char[] lex0 = {'0','1','2','3','4','5','6','7','8','9','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','?','<','>','|','|',' ',';','.',',','/','(',')',':','-','%','|','|','|','|','#','=','!','|','|','|','|','|','|','|','|','|','|','|','|','|','|','|','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	static char[] lex1 =  {'|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', 'M', 'F', '|', '|', '|', 'K', 'I', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', 'X', 'G', 'L', 'E', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|'};
	static char[] lex2 =  {'|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', 'm', 'f', '|', '|', '|', 'k', 'i', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', 'x', 'g', 'l', 'e', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|'};
	
//	static char[] chars0 = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '|', '?', '<', '>', '|', '|', ' ', '|', '.', ',', '/', '(', ')', ':', '-', '%', '|', '|', '|', '|', '#', '=', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
//	static char[] index0 = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF,0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF};
//	static char[] chars1 = {};
//	static char[] index1 = {};
	
	static char[] other = {'À','Á','Â','Ã','Ä','Å','È','É','Ê','Ë','Ì','Í','Î','Ï','Ò','Ó','Ô','Õ','Ö','Ù','Ú','Û','Ü','à','á','â','ã','ä','å','è','é','ê','ë','ì','í','î','ï','ò','ó','ô','õ','ö','ù','ú','û','ü','Ž','ž','Œ','œ'};
	static int[] glyph =  {120,121,122,124,125,126,120,121,122,125,120,121,122,125,120,121,122,124,125,120,121,122,125,120,121,122,124,125,126,120,121,122,125,120,121,122,125,120,121,122,124,125,120,121,122,125,123,123, 62, 88};
	static int[] letter = {112,112,112,112,112,112,113,113,113,113,114,114,114,114,115,115,115,115,115,116,116,116,116,117,117,117,117,117,117,118,118,118,118,119,119,119,119,115,115,115,115,115,116,116,116,116, 99, 99, 52, 78};
				
	static int[] text = new int[65536];
	static int[] block = new int[65536];
	
	public static void main(String[] args) {

		if (type) {
			Scanner keyboard = new Scanner(System.in);
			String input;
			do {
				int track = 0;
				int index = 0;
				System.out.println("Type Text:");
				input = keyboard.nextLine();
				int i = 0;
				while (i < input.length() && i < 65536) {
					char output = input.charAt(i);
					int f = 0;
					/*if (output == ';') { //New Line
						text[index] = 33;
						index++;
						f = 1;
					}*/
					if (output == '@') { //New Section
						block[track] = index;
						track++;
						f = 1;
					}
					if (output == '\\') {
						output = input.charAt(i + 1);
						for (int j = 0; j < lex1.length; j++) {
							if (lex1[j] == output) {
								text[index] = j & 127;
								index++;
								f = 1;
							}
						}
						if (f == 0) {
							for (int j = 0; j < lex2.length; j++) {
								if (lex2[j] == output) {
									text[index] = j & 127;
									index++;
									f = 1;
								}
							}
						}
						i++;
					} else {
						for (int j = 0; j < lex0.length; j++) {
							if (lex0[j] == output) {
								text[index] = j & 127;
								index++;
								f = 1;
							}
						}
					}
					if (f == 0 && f == 1) { //Diacritics
						for (int j = 0; j < other.length; j++) {
							if (other[j] == output) {
								text[index] = glyph[j];
								index++;
								text[index] = letter[j];
								index++;
								f = 1;
							}
						}
					}
					if (f == 0) {
						text[index] = 32;
						index++;
						f = 1;
					}
					i++;
				}
				System.out.print("\n{" + text[0]); //Was * 2
				if (index > 1) {
					for (int a = 1; a < index; a++) {
						System.out.print("," + text[a]); //Was * 2
					}
				}
				System.out.println("};\n");
				System.out.println("Length: " + index);
//				System.out.print("{" + block[0]);
//				if (track > 1) {
//					for (int a = 1; a < track; a++) {
//						System.out.print("," + block[a]);
//					}
//				}
//				System.out.println("};\n");
			} while (input.length() > 0 && false);
			keyboard.close();
			
			
			
			
			
		} else {
			
			loadImage();
			for (int i = 0; i < resX * resY; i++) {
				if (value[i] == 16777215) {
					value[i] = 1;
				}
			}
			System.out.print("{");
			/*
			for (int v = 0; v < resY; v += 9) {
				for (int u = 0; u < resX; u += 7) {
					int i = 0;
					int j = 0;
					for (int y = v; y < v + 4; y++) {
						for (int x = u; x < u + 6; x++) {
							//System.out.print(value[y * resX + x]);
							j += value[y * resX + x] * (int)Math.pow(2, i);
							i++;
						}
					}
					if (v == 0 && u == 0) {
						System.out.print(j);
					} else {
						System.out.print("," + j);
					}
					i = 0;
					j = 0;
					for (int y = v + 4; y < v + 8; y++) {
						for (int x = u; x < u + 6; x++) {
							//System.out.print(value[y * resX + x]);
							j += value[y * resX + x] * (int)Math.pow(2, i);
							i++;
						}
					}
					System.out.print("," + j);
					//System.out.print("\n");
				}
			}
			System.out.print("};");
			*/
			
			for (int v = 0; v < resY; v += 9) {
				for (int u = 0; u < resX; u += 7) {
					
					for (int x = u; x < u + 6; x++) {
						int i = 0;
						int j = 0;
						for (int y = v; y < v + 8; y++) {
							//System.out.print(value[y * resX + x]);
							j += value[y * resX + x] * (int)Math.pow(2, i);
							i++;
						}
						if (x == 0 && v == 0) { //If first element
							System.out.print(j);
						} else { //General Case
							System.out.print("," + j);
						}
					}
					
				}
			}
			System.out.print("};");
			
		}
		
	}

	private static void loadImage() {
		try {
			//File file = new File("C:\\Users\\zerico\\Downloads\\Text Font 6x8 Version 0.png");
			File file = new File("C:\\Users\\zerico\\Documents\\Programming\\superSweeper\\assets\\char 6x8 v4.png");
			BufferedImage bufferedImage = ImageIO.read(file);
			
			for (int y = 0; y < resY; y++) {
				for (int x = 0; x < resX; x++) {
					value[y * resX + x] = Math.abs(bufferedImage.getRGB(x, y)) - 1; // the sample in the specified band for the pixel at the specified coordinate.
					//System.out.println(Math.abs(bufferedImage.getRGB(x, y)) - 1);
				}
			}
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
